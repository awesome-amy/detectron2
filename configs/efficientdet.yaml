MODEL:
  META_ARCHITECTURE: "EfficientMask"
  PIXEL_MEAN: [0.485, 0.456, 0.406]
  PIXEL_STD: [0.229, 0.224, 0.225]
  MASK_ON: True
  BACKBONE:
    NAME: "build_efficientnet_bifpn_backbone"
  EFFICIENTNET:
    COMPOUND_COEF: 0
  ANCHOR_GENERATOR:
    SIZES: !!python/object/apply:eval ["[[x, x * 2**(1.0/3), x * 2**(2.0/3) ] for x in [32, 64, 128, 256, 512 ]]"]
  RETINANET:
    NUM_CLASSES: 90
    IOU_THRESHOLDS: [0.4, 0.5]
    IOU_LABELS: [0, -1, 1]
    SMOOTH_L1_LOSS_BETA: 0.0
    SCORE_THRESH_TEST: 0.05
    NMS_THRESH_TEST: 0.5
  ROI_HEADS:
    NAME: "EfficientMaskROIHeads"
    NUM_CLASSES: 90
    IN_FEATURES: ["p3", "p4", "p5"]
    BATCH_SIZE_PER_IMAGE: 256
    PROPOSAL_APPEND_GT: False
  ROI_MASK_HEAD:
    CONV_DIM: 256
    POOLER_SAMPLING_RATIO: 2
    NUM_CONV: 4
DATASETS:
  TRAIN: ("coco_2017_train",)
  TEST: ("coco_2017_val",)
DATALOADER:
  NUM_WORKERS: 2
SOLVER:
  IMS_PER_BATCH: 2
  BASE_LR: 0.01  # Note that RetinaNet uses a different default learning rate
  STEPS: (20000, 40000, 60000, )
  MAX_ITER: 10
INPUT:
  MIN_SIZE_TRAIN: (512,)
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 512
  MAX_SIZE_TEST: 512
  FORMAT: "RGB"
VERSION: 2
